import geopandas as gpd
import pandas as pd
from django.test import TestCase
from django.contrib.gis.geos import GEOSGeometry
from shapely.geometry import Polygon
from iarbre_data.management.commands.import_vulnerability import (
    Command,
    save_geometries,
)
from iarbre_data.models import Vulnerability
from iarbre_data.factories import CityFactory


class ImportVulnerabilityCommandTest(TestCase):
    @classmethod
    def setUpClass(cls):
        super().setUpClass()
        cls.test_city = CityFactory(code="69001", name="Lyon 1er")

    def setUp(self):
        self.command = Command()
        Vulnerability.objects.all().delete()

    def test_vulnerability_all_indices(self):
        initial_count = Vulnerability.objects.count()
        vulnerability = Vulnerability.objects.create(
            geometry=GEOSGeometry(
                "POLYGON((4.8 45.7, 4.81 45.7, 4.81 45.71, 4.8 45.71, 4.8 45.7))",
                srid=2154,
            ),
            map_geometry=GEOSGeometry(
                "POLYGON((4.8 45.7, 4.81 45.7, 4.81 45.71, 4.8 45.71, 4.8 45.7))",
                srid=3857,
            ),
            vulnerability_index_day=0.85,
            vulnerability_index_night=0.75,
            expo_index_day=0.65,
            expo_index_night=0.55,
            capaf_index_day=0.45,
            capaf_index_night=0.35,
            sensibilty_index_day=0.95,
            sensibilty_index_night=0.80,
            details={"majic_Log_av1949": 100, "majic_Log_1949_1989": 200},
        )
        self.assertEqual(Vulnerability.objects.count(), initial_count + 1)
        self.assertEqual(vulnerability.vulnerability_index_day, 0.85)
        self.assertEqual(vulnerability.vulnerability_index_night, 0.75)
        self.assertEqual(vulnerability.expo_index_day, 0.65)
        self.assertEqual(vulnerability.expo_index_night, 0.55)
        self.assertEqual(vulnerability.capaf_index_day, 0.45)
        self.assertEqual(vulnerability.capaf_index_night, 0.35)
        self.assertEqual(vulnerability.sensibilty_index_day, 0.95)
        self.assertEqual(vulnerability.sensibilty_index_night, 0.80)
        self.assertEqual(vulnerability.details["majic_Log_av1949"], 100)

    def test_save_geometries_with_real_geodataframe(self):
        polygons = [
            Polygon(
                [(4.8, 45.7), (4.81, 45.7), (4.81, 45.71), (4.8, 45.71), (4.8, 45.7)]
            ),
            Polygon(
                [(4.82, 45.7), (4.83, 45.7), (4.83, 45.71), (4.82, 45.71), (4.82, 45.7)]
            ),
        ]

        data = {
            "geometry": polygons,
            "map_geometry": polygons,
            "VULNERABILITE_JOUR": [0.8, 0.9],
            "VULNERABILITE_NUIT": [0.7, 0.8],
            "EXPO_JOUR": [0.6, 0.7],
            "EXPO_NUIT": [0.5, 0.6],
            "CAPAF_JOUR": [0.4, 0.5],
            "CAPAF_NUIT": [0.3, 0.4],
            "SENSI_JOUR": [0.9, 1.0],
            "SENSI_NUIT": [0.8, 0.9],
            "majic_Log_av1949": [50, 60],
            "majic_Log_1949_1989": [100, 120],
            "majic_nlogh": [10, 15],
            "siret_densite_emploi": [0.2, 0.3],
        }

        gdf = gpd.GeoDataFrame(data, crs="EPSG:4326")

        initial_count = Vulnerability.objects.count()
        save_geometries(gdf)

        self.assertEqual(Vulnerability.objects.count(), initial_count + 2)

        # Check first vulnerability record
        vuln1 = Vulnerability.objects.filter(vulnerability_index_day=0.8).first()
        self.assertIsNotNone(vuln1)
        self.assertEqual(vuln1.vulnerability_index_night, 0.7)
        self.assertEqual(vuln1.expo_index_day, 0.6)
        self.assertEqual(vuln1.details["majic_Log_av1949"], 50)

        # Check second vulnerability record
        vuln2 = Vulnerability.objects.filter(vulnerability_index_day=0.9).first()
        self.assertIsNotNone(vuln2)
        self.assertEqual(vuln2.sensibilty_index_day, 1.0)
        self.assertEqual(vuln2.details["siret_densite_emploi"], 0.3)

    def test_save_geometries_large_batch(self):
        num_records = 15000
        polygons = [
            Polygon(
                [
                    (4.8 + i * 0.001, 45.7),
                    (4.81 + i * 0.001, 45.7),
                    (4.81 + i * 0.001, 45.71),
                    (4.8 + i * 0.001, 45.71),
                    (4.8 + i * 0.001, 45.7),
                ]
            )
            for i in range(num_records)
        ]

        data = {
            "geometry": polygons,
            "map_geometry": polygons,
            "VULNERABILITE_JOUR": [0.5 + (i % 10) * 0.05 for i in range(num_records)],
            "VULNERABILITE_NUIT": [0.4 + (i % 10) * 0.05 for i in range(num_records)],
            "EXPO_JOUR": [0.3 + (i % 10) * 0.05 for i in range(num_records)],
            "EXPO_NUIT": [0.2 + (i % 10) * 0.05 for i in range(num_records)],
            "CAPAF_JOUR": [0.1 + (i % 10) * 0.05 for i in range(num_records)],
            "CAPAF_NUIT": [0.05 + (i % 10) * 0.05 for i in range(num_records)],
            "SENSI_JOUR": [0.6 + (i % 10) * 0.04 for i in range(num_records)],
            "SENSI_NUIT": [0.5 + (i % 10) * 0.04 for i in range(num_records)],
            "extra_field": [f"data_{i}" for i in range(num_records)],
        }

        gdf = gpd.GeoDataFrame(data, crs="EPSG:4326")

        initial_count = Vulnerability.objects.count()
        save_geometries(gdf)

        self.assertEqual(Vulnerability.objects.count(), initial_count + num_records + 1)

    def test_fillna_zero_handling(self):
        polygons = [
            Polygon(
                [(4.8, 45.7), (4.81, 45.7), (4.81, 45.71), (4.8, 45.71), (4.8, 45.7)]
            )
        ]

        data = {
            "geometry": polygons,
            "map_geometry": polygons,
            "VULNERABILITE_JOUR": [0.8],
            "VULNERABILITE_NUIT": [0.7],
            "EXPO_JOUR": [0.6],
            "EXPO_NUIT": [0.5],
            "CAPAF_JOUR": [0.4],
            "CAPAF_NUIT": [0.3],
            "SENSI_JOUR": [0.9],
            "SENSI_NUIT": [0.8],
            "majic_Log_av1949": [pd.NA],  # NaN value
            "majic_nlogh": [pd.NA],
            "siret_densite_emploi": [pd.NA],
        }

        gdf = gpd.GeoDataFrame(data, crs="EPSG:4326")
        gdf.fillna(0, inplace=True)  # This is what the command does

        save_geometries(gdf)

        vuln = Vulnerability.objects.first()
        self.assertEqual(vuln.details["majic_Log_av1949"], 0)
        self.assertEqual(vuln.details["majic_nlogh"], 0)
        self.assertEqual(vuln.details["siret_densite_emploi"], 0)
