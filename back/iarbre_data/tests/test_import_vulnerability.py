from django.test import TestCase
from django.contrib.gis.geos import GEOSGeometry
from iarbre_data.management.commands.import_vulnerability import Command
from iarbre_data.models import Vulnerability
from iarbre_data.factories import CityFactory


class ImportVulnerabilityCommandTest(TestCase):
    @classmethod
    def setUpClass(cls):
        super().setUpClass()
        cls.test_city = CityFactory(code="69001", name="Lyon 1er")

    def setUp(self):
        self.command = Command()
        Vulnerability.objects.all().delete()

    def test_vulnerability_model_creation(self):
        initial_count = Vulnerability.objects.count()

        vulnerability = Vulnerability.objects.create(
            geometry=GEOSGeometry(
                "POLYGON((4.8 45.7, 4.81 45.7, 4.81 45.71, 4.8 45.71, 4.8 45.7))",
                srid=2154,
            ),
            map_geometry=GEOSGeometry(
                "POLYGON((4.8 45.7, 4.81 45.7, 4.81 45.71, 4.8 45.71, 4.8 45.7))",
                srid=3857,
            ),
            vulnerability_index_day=0.5,
            vulnerability_index_night=0.3,
            expo_index_day=0.7,
            expo_index_night=0.4,
            capaf_index_day=0.2,
            capaf_index_night=0.1,
            sensibilty_index_day=0.6,
            sensibilty_index_night=0.8,
            details={"extra_data": "test"},
        )

        self.assertEqual(Vulnerability.objects.count(), initial_count + 1)
        self.assertEqual(vulnerability.vulnerability_index_day, 0.5)
        self.assertEqual(vulnerability.vulnerability_index_night, 0.3)

    def test_vulnerability_indices_range(self):
        """Test that vulnerability indices are properly stored."""
        vulnerability = Vulnerability.objects.create(
            geometry=GEOSGeometry(
                "POLYGON((4.8 45.7, 4.81 45.7, 4.81 45.71, 4.8 45.71, 4.8 45.7))",
                srid=2154,
            ),
            map_geometry=GEOSGeometry(
                "POLYGON((4.8 45.7, 4.81 45.7, 4.81 45.71, 4.8 45.71, 4.8 45.7))",
                srid=3857,
            ),
            vulnerability_index_day=1.0,
            vulnerability_index_night=0.0,
            expo_index_day=1.0,
            expo_index_night=0.0,
            capaf_index_day=1.0,
            capaf_index_night=0.0,
            sensibilty_index_day=1.0,
            sensibilty_index_night=0.0,
            details={},
        )

        # Test extreme values
        self.assertEqual(vulnerability.vulnerability_index_day, 1.0)
        self.assertEqual(vulnerability.vulnerability_index_night, 0.0)
