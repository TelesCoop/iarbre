from django.test import TestCase
from django.contrib.gis.geos import GEOSGeometry
from iarbre_data.management.commands.vulnerability_projection import Command
from iarbre_data.models import Tile, Vulnerability
from iarbre_data.factories import (
    TileFactory,
    VulnerabilityFactory,
    CityFactory,
    IrisFactory,
)


class ProjectVulnerabilityCommandTest(TestCase):
    @classmethod
    def setUpClass(cls):
        super().setUpClass()
        cls.test_city = CityFactory(code="69001", name="Lyon 1er")
        cls.test_iris = IrisFactory(city=cls.test_city)

    def setUp(self):
        self.command = Command()
        Tile.objects.all().delete()
        Vulnerability.objects.all().delete()

    def test_find_best_vulnerability_for_tile_single_overlap(self):
        """Test finding vulnerability with single overlapping zone"""
        tile_geom = GEOSGeometry(
            "POLYGON((900000 6450000, 900005 6450000, 900005 6450005, 900000 6450005, 900000 6450000))",
            srid=2154,
        )
        tile = TileFactory(
            geometry=tile_geom,
            city=self.test_city,
            iris=self.test_iris,
            vulnerability_idx=None,
        )

        vuln_geom = GEOSGeometry(
            "POLYGON((899998 6449998, 900010 6449998, 900010 6450010, 899998 6450010, 899998 6449998))",
            srid=2154,
        )
        vulnerability = VulnerabilityFactory(
            geometry=vuln_geom, vulnerability_index_day=0.8
        )

        result = self.command._find_best_vulnerability_for_tile(tile)
        self.assertEqual(result, vulnerability)

    def test_find_best_vulnerability_for_tile_multiple_overlaps(self):
        """Test finding vulnerability with largest intersection when multiple zones overlap"""
        tile_geom = GEOSGeometry(
            "POLYGON((900000 6450000, 900005 6450000, 900005 6450005, 900000 6450005, 900000 6450000))",
            srid=2154,
        )
        tile = TileFactory(
            geometry=tile_geom,
            city=self.test_city,
            iris=self.test_iris,
            vulnerability_idx=None,
        )

        vuln1_geom = GEOSGeometry(
            "POLYGON((899998 6449998, 900002 6449998, 900002 6450002, 899998 6450002, 899998 6449998))",
            srid=2154,
        )
        VulnerabilityFactory(geometry=vuln1_geom, vulnerability_index_day=0.3)

        vuln2_geom = GEOSGeometry(
            "POLYGON((900001 6450001, 900007 6450001, 900007 6450007, 900001 6450007, 900001 6450001))",
            srid=2154,
        )
        vuln2 = VulnerabilityFactory(geometry=vuln2_geom, vulnerability_index_day=0.9)

        result = self.command._find_best_vulnerability_for_tile(tile)
        self.assertEqual(result, vuln2)

    def test_find_best_vulnerability_for_tile_no_overlap(self):
        """Test when tile doesn't intersect with any vulnerability zone"""
        tile_geom = GEOSGeometry(
            "POLYGON((900000 6450000, 900005 6450000, 900005 6450005, 900000 6450005, 900000 6450000))",
            srid=2154,
        )
        tile = TileFactory(
            geometry=tile_geom,
            city=self.test_city,
            iris=self.test_iris,
            vulnerability_idx=None,
        )

        vuln_geom = GEOSGeometry(
            "POLYGON((900100 6450100, 900110 6450100, 900110 6450110, 900100 6450110, 900100 6450100))",
            srid=2154,
        )
        VulnerabilityFactory(geometry=vuln_geom)

        result = self.command._find_best_vulnerability_for_tile(tile)
        self.assertIsNone(result)

    def test_handle_assigns_vulnerabilities_to_unassigned_tiles(self):
        """Test that handle method assigns vulnerabilities only to tiles without existing assignment"""
        tile1_geom = GEOSGeometry(
            "POLYGON((900000 6450000, 900005 6450000, 900005 6450005, 900000 6450005, 900000 6450000))",
            srid=2154,
        )
        tile1 = TileFactory(
            geometry=tile1_geom,
            city=self.test_city,
            iris=self.test_iris,
            vulnerability_idx=None,
        )

        tile2_geom = GEOSGeometry(
            "POLYGON((900010 6450010, 900015 6450010, 900015 6450015, 900010 6450015, 900010 6450010))",
            srid=2154,
        )
        existing_vuln = VulnerabilityFactory()
        tile2 = TileFactory(
            geometry=tile2_geom,
            city=self.test_city,
            iris=self.test_iris,
            vulnerability_idx=existing_vuln,
        )

        vuln1_geom = GEOSGeometry(
            "POLYGON((899998 6449998, 900010 6449998, 900010 6450010, 899998 6450010, 899998 6449998))",
            srid=2154,
        )
        vuln1 = VulnerabilityFactory(geometry=vuln1_geom)

        self.command.handle(recompute=False)

        # Check results
        tile1.refresh_from_db()
        tile2.refresh_from_db()

        self.assertEqual(tile1.vulnerability_idx, vuln1)
        self.assertEqual(tile2.vulnerability_idx, existing_vuln)  # Should not change

    def test_handle_recompute_flag(self):
        """Test that recompute=True reassigns all tiles"""
        tile_geom = GEOSGeometry(
            "POLYGON((900000 6450000, 900005 6450000, 900005 6450005, 900000 6450005, 900000 6450000))",
            srid=2154,
        )
        old_vuln = VulnerabilityFactory()
        tile = TileFactory(
            geometry=tile_geom,
            city=self.test_city,
            iris=self.test_iris,
            vulnerability_idx=old_vuln,
        )

        new_vuln_geom = GEOSGeometry(
            "POLYGON((899998 6449998, 900010 6449998, 900010 6450010, 899998 6450010, 899998 6449998))",
            srid=2154,
        )
        new_vuln = VulnerabilityFactory(geometry=new_vuln_geom)

        self.command.handle(recompute=True)

        tile.refresh_from_db()
        self.assertEqual(tile.vulnerability_idx, new_vuln)

    def test_handle_batch_processing(self):
        """Test that handle method processes large numbers of tiles efficiently"""
        tiles = []
        vulnerabilities = []

        for i in range(10):
            for j in range(10):
                x = 900000 + i * 5
                y = 6450000 + j * 5
                tile_geom = GEOSGeometry(
                    f"POLYGON(({x} {y}, {x+5} {y}, {x+5} {y+5}, {x} {y+5}, {x} {y}))",
                    srid=2154,
                )
                tile = TileFactory(
                    geometry=tile_geom,
                    city=self.test_city,
                    iris=self.test_iris,
                    vulnerability_idx=None,
                )
                tiles.append(tile)

        for i in range(5):
            for j in range(5):
                x = 900000 + i * 10
                y = 6450000 + j * 10
                vuln_geom = GEOSGeometry(
                    f"POLYGON(({x-2} {y-2}, {x+12} {y-2}, {x+12} {y+12}, {x-2} {y+12}, {x-2} {y-2}))",
                    srid=2154,
                )
                vuln = VulnerabilityFactory(geometry=vuln_geom)
                vulnerabilities.append(vuln)

        self.command.handle(recompute=False)

        assigned_tiles = Tile.objects.filter(vulnerability_idx__isnull=False)
        self.assertGreater(assigned_tiles.count(), 0)

    def test_geometry_error_handling(self):
        """Test that command handles geometry errors"""
        tile_geom = GEOSGeometry(
            "POLYGON((900000 6450000, 900005 6450000, 900005 6450005, 900000 6450005, 900000 6450000))",
            srid=2154,
        )
        tile = TileFactory(
            geometry=tile_geom,
            city=self.test_city,
            iris=self.test_iris,
            vulnerability_idx=None,
        )

        vuln_geom = GEOSGeometry(
            "POLYGON((899998 6449998, 900010 6449998, 900010 6450010, 899998 6450010, 899998 6449998))",
            srid=2154,
        )
        vuln = VulnerabilityFactory(geometry=vuln_geom)

        result = self.command._find_best_vulnerability_for_tile(tile)
        self.assertEqual(result, vuln)
