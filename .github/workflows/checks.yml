name: CI tests

on:
  push:
    branches:
      - dev
      - main
  pull_request:
    branches:
      - dev
      - main
    types:
      - opened
      - reopened
      - synchronize
      - ready_for_review
env:
  TELESCOOP_DEV: true
  IS_TESTING: true

jobs:
  setup:
    runs-on: ubuntu-22.04
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.10"
          cache: "pip"
      # https://github.com/actions/setup-python/blob/main/README.md#caching-packages-dependencies
      - run: pip install -r back/requirements.txt

      - name: Cache Node.js dependencies
        uses: actions/cache@v3
        with:
          path: ./front/node_modules
          key: ${{ runner.os }}-node-${{ hashFiles('front/package-lock.json') }}

      - name: Configure npm
        if: steps.npm-cache.outputs.cache-hit != 'true'
        run: |
          npm config set fetch-retries 3
          npm config set fetch-retry-mintimeout 20000
          npm config set fetch-retry-maxtimeout 120000
        working-directory: ./front

      - name: Install front js dependencies
        run: npm ci --prefer-offline --no-audit
        working-directory: ./front

  pre-commit:
    runs-on: ubuntu-22.04
    needs: setup
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.10"
          cache: "pip"
      # https://github.com/actions/setup-python/blob/main/README.md#caching-packages-dependencies
      - run: pip install -r back/requirements.txt

      - name: Set up PostGIS
        uses: nyurik/action-setup-postgis@v2
        with:
          username: myuser
          password: securepassword
          database: mydatabase
          port: 5432
        id: postgres

      - name: Create local_settings.ini
        run: |
          cat <<EOF > back/local_settings.ini
          [database]
          engine=postgresql
          user=myuser
          name=mydatabase
          password=securepassword
          EOF

      - name: Restore Node.js cache
        uses: actions/cache@v3
        with:
          path: ./front/node_modules
          key: ${{ runner.os }}-node-${{ hashFiles('front/package-lock.json') }}

      - name: Install js dependencies if not cached
        if: steps.cache-node.outputs.cache-hit != 'true'
        run: npm install
        working-directory: ./front

      - name: Enforce pre-commit hook server side
        env:
          DATABASE_URL: "postgres://myuser:securepassword@localhost:5432/mydatabase"
          PGSERVICE: ${{ steps.postgres.outputs.service-name }}
        uses: pre-commit/action@v3.0.1

      - name: Generate coverage report
        run: |
          cd back
          coverage run manage.py test
          coverage json --omit="*/migrations/*"
          COVERAGE=$(python3 -c "import json; print(int(json.load(open('coverage.json'))['totals']['percent_covered']))")
          echo "COVERAGE_PERCENT=$COVERAGE" >> $GITHUB_ENV

          # Choose badge color based on coverage percentage
          if (( $(echo "$COVERAGE >= 85" | bc -l) )); then
            echo "BADGE_COLOR=brightgreen" >> $GITHUB_ENV
          elif (( $(echo "$COVERAGE >= 75" | bc -l) )); then
            echo "BADGE_COLOR=yellow" >> $GITHUB_ENV
          else
            echo "BADGE_COLOR=red" >> $GITHUB_ENV
          fi

      - name: Create coverage badge
        uses: schneegans/dynamic-badges-action@v1.7.0
        with:
          auth: ${{ secrets.GIST_SECRET }}
          gistID: 86d9b33a236f4e03bca8799858fc7f6d
          filename: coverage-badge.json
          label: Backend coverage
          message: ${{ env.COVERAGE_PERCENT }}%
          color: ${{ env.BADGE_COLOR }}

  node-setup:
    runs-on: ubuntu-22.04
    needs: setup
    steps:
      - uses: actions/checkout@v4
      - name: Install node
        uses: actions/setup-node@v4
        with:
          node-version-file: ./front/.nvmrc
          cache: "npm"
          cache-dependency-path: ./front/package-lock.json
      - name: Restore Node.js cache
        uses: actions/cache@v3
        with:
          path: ./front/node_modules
          key: ${{ runner.os }}-node-${{ hashFiles('front/package-lock.json') }}
      - name: Install js dependencies if not cached
        if: steps.cache-node.outputs.cache-hit != 'true'
        run: npm install
        working-directory: ./front

  frontend-tests:
    runs-on: ubuntu-22.04
    needs: [setup, node-setup]
    steps:
      - uses: actions/checkout@v4
      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version-file: ./front/.nvmrc
          cache: "npm"
          cache-dependency-path: ./front/package-lock.json
      - name: Restore Node.js cache
        uses: actions/cache@v3
        with:
          path: ./front/node_modules
          key: ${{ runner.os }}-node-${{ hashFiles('front/package-lock.json') }}
      - name: Install front js dependencies if not cached
        if: steps.cache-node.outputs.cache-hit != 'true'
        run: npm install
        working-directory: ./front
      - name: Install Cypress binary
        run: npx cypress install
        working-directory: ./front
      - name: Run cypress component tests
        run: CYPRESS_COVERAGE=true npx cypress run --component
        working-directory: ./front

      - name: Generate frontend coverage report
        run: |
          # List coverage files for debugging
          echo "Checking for coverage files:"
          find . -name "*.json" -path "*/.nyc_output/*" 2>/dev/null || echo "No .nyc_output files found"

          # Generate NYC reports
          if [ -d ".nyc_output" ] && [ "$(ls -A .nyc_output)" ]; then
            echo "Found coverage data, generating report..."
            npx nyc report \
              --reporter json-summary \
              --reporter text-summary \
              --report-dir coverage \
              --exclude-after-remap false

            # Extract coverage percentage
            COVERAGE=$(node -p "
              try {
                const data = JSON.parse(require('fs').readFileSync('coverage/coverage-summary.json', 'utf8'));
                Math.round(data.total.lines.pct || 0);
              } catch (e) {
                console.error('Error reading coverage:', e);
                0;
              }
            ")

            echo "Frontend coverage: $COVERAGE%"
          else
            echo "No coverage data found, setting coverage to 0"
            COVERAGE=0
          fi

          echo "FRONTEND_COVERAGE_PERCENT=$COVERAGE" >> $GITHUB_ENV

          # Choose badge color based on coverage percentage
          if [ "$COVERAGE" -ge 80 ]; then
            echo "FRONTEND_BADGE_COLOR=brightgreen" >> $GITHUB_ENV
          elif [ "$COVERAGE" -ge 70 ]; then
            echo "FRONTEND_BADGE_COLOR=yellow" >> $GITHUB_ENV
          else
            echo "FRONTEND_BADGE_COLOR=red" >> $GITHUB_ENV
          fi
        working-directory: ./front

      - name: Report NYC coverage
        uses: sidx1024/report-nyc-coverage-github-action@v1.2.7
        with:
          coverage_file: "front/coverage/coverage-summary.json"
          sources_base_path: "${{ github.workspace }}/front/"
          files_coverage_table_output_type_order: "SBFL"
          comment_template_file: ".github/nyc-comment-template.md"
          comment_mode: "replace"

      - name: Create frontend coverage badge
        uses: schneegans/dynamic-badges-action@v1.7.0
        with:
          auth: ${{ secrets.GIST_SECRET }}
          gistID: 767df5613fc8e7b99ac2a773f5253463
          filename: coverage-front-badge.json
          label: Frontend coverage
          message: ${{ env.FRONTEND_COVERAGE_PERCENT }}%
          color: ${{ env.FRONTEND_BADGE_COLOR }}

  e2e-tests:
    runs-on: ubuntu-22.04
    needs: setup
    steps:
      - uses: actions/checkout@v4
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.10"
          cache: "pip"
      - run: pip install -r back/requirements.txt

      - name: Set up PostGIS
        uses: nyurik/action-setup-postgis@v2
        with:
          username: myuser
          password: securepassword
          database: mydatabase
          port: 5432
        id: postgres

      - name: Create local_settings.ini
        run: |
          cat <<EOF > back/local_settings.ini
          [database]
          engine=postgresql
          user=myuser
          name=mydatabase
          password=securepassword
          EOF
      - name: Migrate database
        run: python manage.py migrate
        working-directory: ./back
      - name: Populate the database
        run: python manage.py populate
        working-directory: ./back
      - name: Run back-end server in background
        run: python manage.py runserver localhost:8000 &
        working-directory: ./back
      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version-file: ./front/.nvmrc
          cache: "npm"
          cache-dependency-path: ./front/package-lock.json
      - name: Restore Node.js cache from node-setup
        uses: actions/cache@v3
        with:
          path: ./front/node_modules
          key: ${{ runner.os }}-node-${{ hashFiles('front/package-lock.json') }}
      - name: Install front js dependencies if not cached
        if: steps.cache-node.outputs.cache-hit != 'true'
        run: npm install
        working-directory: ./front
      - name: Build front
        run: npm run build
        working-directory: "./front"
      - name: Run e2e tests
        uses: cypress-io/github-action@v6
        with:
          start: npm run preview
          browser: chrome
          config-file: cypress.config.ts
          working-directory: ./front
        env:
          CYPRESS_COVERAGE: true
      - name: Upload cypress screenshots
        uses: actions/upload-artifact@v4
        if: failure()
        with:
          name: cypress-screenshot
          path: |
            front/cypress/screenshots
          retention-days: 10

  doc-tests:
    runs-on: ubuntu-22.04
    needs: [setup]
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Python doc
        uses: actions/setup-python@v5
        with:
          python-version: "3.10"
          cache: "pip"
      - run: pip install -r mkdocs-requirements.txt
      - name: Run documentation validation
        run: mkdocs build --strict
