import { computed, type Ref } from "vue"
import type { VulnerabilityFactor, VulnerabilityData, ColorLegendItem } from "@/types/vulnerability"

export const useVulnerability = (data: Ref<VulnerabilityData>) => {
  const factorsWithScores = computed((): VulnerabilityFactor[] => {
    if (!data?.value?.details) {
      console.warn("Données de vulnérabilité manquantes")
      return []
    }

    const details = data.value.details

    return [
      {
        id: "surfaceBaties",
        label: "Proportion de volumes bâtis",
        category: "Exposition",
        dayScore: details.ExpoJourNoteDensBatiVol ?? null,
        nightScore: details.ExpoNuitNoteDensBatiVol ?? null
      },
      {
        id: "obstacleCiel",
        label: "Facteur de vue du ciel",
        category: "Exposition",
        dayScore: details.ExpoJourNoteSkyViewFactor ?? null,
        nightScore: details.ExpoNuitNoteSkyViewFactor ?? null
      },
      {
        id: "canyon",
        label: "Rapport hauteur/largeur (aspect ratio)",
        category: "Exposition",
        dayScore: details.ExpoJourNoteCanyon ?? null,
        nightScore: details.ExpoNuitNoteCanyon ?? null
      },
      {
        id: "impermeabilisation",
        label: "Imperméabilisation des sols",
        category: "Exposition",
        dayScore: details.ExpoJourNotePermeabilite ?? null,
        nightScore: details.ExpoNuitNotePermeabilite ?? null
      },
      {
        id: "vegetationHaute",
        label: "Ombrage lié aux arbres",
        category: "Exposition",
        dayScore: details.ExpoJourNoteVegetationHaute ?? null,
        nightScore: null
      },
      {
        id: "presenceVegetation",
        label: "Présence de végétation",
        category: "Exposition",
        dayScore: details.ExpoJourNoteVegetation ?? null,
        nightScore: details.ExpoNuitNoteVegetation ?? null
      },
      {
        id: "presenceEau",
        label: "Présence d'eau",
        category: "Exposition",
        dayScore: details.ExpoJourNoteEau ?? null,
        nightScore: details.ExpoNuitNoteEau ?? null
      },
      {
        id: "proximiteForet",
        label: "Proximité à un bois une forêt",
        category: "Exposition",
        dayScore: details.ExpoJourNoteProxiForet ?? null,
        nightScore: details.ExpoNuitNoteProxiForet ?? null
      },
      {
        id: "proximiteEau",
        label: "Proximité à un cours d'eau ou un plan d'eau",
        category: "Exposition",
        dayScore: details.ExpoJourNoteProxiEau ?? null,
        nightScore: details.ExpoNuitNoteProxiEau ?? null
      },
      {
        id: "effusiviteThermique",
        label: "Effusivité thermique",
        category: "Exposition",
        dayScore: details.ExpoJourNoteEffusiviteThermique ?? null,
        nightScore: null
      },
      {
        id: "reflechissement",
        label: "Albédo",
        category: "Exposition",
        dayScore: details.ExpoJourNoteAlbedo ?? null,
        nightScore: null
      },
      {
        id: "accesUrgence",
        label: "Accessibilité à un service d’urgences",
        category: "Difficulté à faire face",
        dayScore: details.CapafJourNoteAccesurgences ?? null,
        nightScore: details.CapafNuitNoteAccesurgences ?? null
      },
      {
        id: "menagePauvre",
        label: "Part de ménages en situation de précarité",
        category: "Difficulté à faire face",
        dayScore: details.CapafJourNoteMenpauv ?? null,
        nightScore: details.CapafNuitNoteMenpauv ?? null
      },
      {
        id: "proxiVert",
        label: "Proximité à un espace vert",
        category: "Difficulté à faire face",
        dayScore: details.CapafJourNoteProxiespacevert ?? null,
        nightScore: details.CapafNuitNoteProxiespacevert ?? null
      },
      {
        id: "vegetHaute",
        label: "Présence de végétation haute",
        category: "Difficulté à faire face",
        dayScore: details.CapafJourNoteVegetationHaute ?? null,
        nightScore: details.CapafNuitNoteVegetationHaute ?? null
      },
      {
        id: "offreMed",
        label: "Accessibilité à un médecin généraliste",
        category: "Difficulté à faire face",
        dayScore: details.CapafJourNoteOffremed ?? null,
        nightScore: null
      },
      {
        id: "densHab",
        label: "Densité d'habitants",
        category: "Sensibilité",
        dayScore: details.SensiJourNoteDensitéHab ?? null,
        nightScore: details.SensiNuitNoteDensitéHab ?? null
      },
      {
        id: "densLog",
        label: "Densité d'occupation des logements",
        category: "Sensibilité",
        dayScore: details.SensiJourNoteDensitéOccupationLogement ?? null,
        nightScore: details.SensiNuitNoteDensitéOccupationLogement ?? null
      },
      {
        id: "incofortHabitat",
        label: "Présence de logements à faible performance énergétique",
        category: "Sensibilité",
        dayScore: details.SensiJourNoteIncofortHabitat ?? null,
        nightScore: details.SensiNuitNoteIncofortHabitat ?? null
      },
      {
        id: "partMenage1ind",
        label: "Part de ménage individuel",
        category: "Sensibilité",
        dayScore: details.SensiJourNotePartMenage1ind ?? null,
        nightScore: details.SensiNuitNotePartMenage1ind ?? null
      },
      {
        id: "popSensible",
        label: "Part la population sensible via l'âge",
        category: "Sensibilité",
        dayScore: details.SensiJourNotePopulationSensible_âge ?? null,
        nightScore: details.SensiNuitNotePopulationSensible_âge ?? null
      },
      {
        id: "qualiteAir",
        label: "Pics de pollution à l’ozone fréquents",
        category: "Sensibilité",
        dayScore: details.SensiJourNoteQualitéAir ?? null,
        nightScore: details.SensiNuitNoteQualitéAir ?? null
      },
      {
        id: "densEmploi",
        label: "Densité d'emplois",
        category: "Sensibilité",
        dayScore: details.SensiJourNoteDensiteEmploi ?? null,
        nightScore: null
      }
    ]
  })

  const getScoreColor = (score: number, factorId: string): string => {
    switch (factorId) {
      case "surfaceBaties":
        if (score === 4) return "bg-red-500"
        if (score === 2) return "bg-orange-500"
        if (score === 0) return "bg-gray-400"
        break

      case "obstacleCiel":
        if (score === 4) return "bg-red-500"
        if (score === 2) return "bg-orange-500"
        if (score === 1) return "bg-yellow-500"
        if (score === 0) return "bg-gray-400"
        if (score < 0) return "bg-green-500"
        break

      case "canyon":
        if (score >= 3) return "bg-red-500"
        if (score === 2) return "bg-orange-500"
        if (score === 1) return "bg-yellow-500"
        if (score === 0) return "bg-gray-400"
        if (score < 0) return "bg-green-500"
        break

      case "ruesEtroites":
        if (score >= 3) return "bg-red-500"
        if (score === 2) return "bg-orange-500"
        if (score === 0) return "bg-gray-400"
        if (score === -2) return "bg-green-500"
        break

      case "vegetationHaute":
        if (score == 0) return "bg-gray-400"
        if (score < 0) return "bg-green-500"
        break

      case "presenceVegetation":
        if (score === 1) return "bg-yellow-500"
        if (score === 0) return "bg-gray-400"
        if (score < 0) return "bg-green-500"
        break

      case "presenceEau":
        if (score === 1) return "bg-yellow-500"
        if (score === 0) return "bg-gray-400"
        if (score < 0) return "bg-green-500"
        break

      case "impermeabilisation":
        if (score === 3) return "bg-red-500"
        if (score === 2) return "bg-orange-500"
        if (score === -1) return "bg-green-500"
        break

      case "effusiviteThermique":
        if (score === 4) return "bg-red-500"
        if (score === 2) return "bg-orange-500"
        if (score === 0) return "bg-gray-400"
        break

      case "reflechissement":
        if (score === 2) return "bg-orange-500"
        if (score === 1) return "bg-yellow-500"
        if (score === -2) return "bg-blue-400"
        break

      case "proximiteForet":
        if (score === -1) return "bg-blue-400"
        if (score === 0) return "bg-gray-400"
        break

      case "proximiteEau":
        if (score === -1) return "bg-blue-400"
        if (score === 0) return "bg-gray-400"
        break

      case "accesUrgence":
        if (score === 0) return "bg-gray-400"
        if (score === 1) return "bg-yellow-500"
        if (score === 2) return "bg-orange-500"
        break

      case "menagePauvre":
        if (score === 0) return "bg-gray-400"
        if (score === 3) return "bg-orange-500"
        if (score === 6) return "bg-red-500"
        break

      case "proxiVert":
        if (score === 0) return "bg-gray-400"
        if (score === 1) return "bg-yellow-500"
        if (score === 2) return "bg-orange-500"
        break

      case "vegetHaute":
        if (score === 0) return "bg-gray-400"
        if (score === 1) return "bg-yellow-500"
        if (score === 2) return "bg-orange-500"
        break

      case "offreMed":
        if (score === 0) return "bg-gray-400"
        if (score === 2) return "bg-orange-500"
        break

      case "densEmploi":
        if (score === 0) return "bg-gray-400"
        if (score === 1) return "bg-yellow-500"
        if (score === 2) return "bg-orange-500"
        if (score === 3) return "bg-orange-500"
        break

      case "qualiteAir":
        if (score === 1) return "bg-yellow-500"
        if (score === 2) return "bg-orange-500"
        if (score === 3) return "bg-orange-500"
        if (score === 4) return "bg-red-500"
        break

      case "incofortHabitat":
        if (score === 0) return "bg-gray-400"
        if (score === 1) return "bg-yellow-500"
        if (score === 2) return "bg-orange-500"
        if (score === 3) return "bg-orange-500"
        if (score === 4) return "bg-red-500"
        if (score === 6) return "bg-red-500"
        break

      case "densLog":
        if (score === 0) return "bg-gray-400"
        if (score === 1) return "bg-yellow-500"
        if (score === 3) return "bg-orange-500"
        if (score === 5) return "bg-red-500"
        break

      case "partMenage1ind":
        if (score === 0) return "bg-gray-400"
        if (score === 1) return "bg-yellow-500"
        if (score === 4) return "bg-red-500"
        if (score === 6) return "bg-red-500"
        break

      case "popSensible":
        if (score === 0) return "bg-gray-400"
        if (score === 1) return "bg-yellow-500"
        if (score === 2) return "bg-orange-500"
        if (score === 3) return "bg-orange-500"
        if (score === 4) return "bg-red-500"
        if (score === 5) return "bg-red-500"
        if (score === 6) return "bg-red-500"
        break

      case "densHab":
        if (score === 0) return "bg-gray-400"
        if (score === 1) return "bg-yellow-500"
        if (score === 2) return "bg-orange-500"
        if (score === 3) return "bg-orange-500"
        if (score === 4) return "bg-red-500"
        if (score === 5) return "bg-red-500"
        if (score === 6) return "bg-red-500"
        break
    }
    return "bg-white"
  }

  const getScoreLabel = (score: number, factorId: string): string => {
    const color = getScoreColor(score, factorId)

    if (color.includes("red")) return "Fort"
    if (color.includes("orange")) return "Moyen"
    if (color.includes("yellow")) return "Faible"
    if (color.includes("gray")) return "Pas d'impact"
    if (color.includes("green")) return "Effet de fraîcheur"
    return "Non pris en compte"
  }

  const colorLegend: ColorLegendItem[] = [
    { color: "bg-red-500", label: "Fort" },
    { color: "bg-orange-500", label: "Moyen" },
    { color: "bg-yellow-500", label: "Faible" },
    { color: "bg-gray-400", label: "Pas d'impact" },
    { color: "bg-green-500", label: "Effet de fraîcheur" },
    { color: "bg-white", label: "Non pris en compte" }
  ]

  const getFactorDescription = (factorId: string): string => {
    const descriptions: Record<string, string> = {
      surfaceBaties:
        "La proportion de volumes bâtis influence l’absorption et la rétention de chaleur par les bâtiments.",
      obstacleCiel:
        "Le facteur de vue du ciel ou sky view factor correspond à la proportion de ciel visible depuis la rue et influence les échanges thermiques depuis et vers la rue.",
      canyon:
        "Le rapport hauteur/largeur ou aspect ratio traduit la présence de rues-canyons, qui apportent de l'ombrage en journée mais emprisonnent la chaleur pour la restituer la nuit.",
      impermeabilisation:
        "L'imperméabilisation des sols empêche le rafraîchissement  de l'air ambiant par évaporation ou évapotranspiration.",
      vegetationHaute:
        "La végétation haute procure de l’ombrage en journée ce qui augmente le confort thermique.",
      presenceVegetation:
        "La présence de végétation contribue au rafraîchissement grâce à l’évapotranspiration.",
      presenceEau: "La présence d’eau contribue au rafraîchissement grâce à l’évaporation.",
      reflechissement: "L'albédo traduit le réfléchissement de l'énergie solaire reçue. ",
      proximiteForet: "Un espace boisé à proximité contribue à rafraîchir les zones voisines.",
      proximiteEau: "Un cours ou plan d'eau a proximité contribue à rafraîchir les zones voisines.",
      effusiviteThermique:
        "L'effusivité thermique des matériaux correspond à leur capacité à emmagasiner ou dégager de la chaleur.",
      accesUrgence:
        "L’accessibilité à un service d’urgences hospitalières (en voiture) traduit l’accès aux soins de jour comme de nuit.",
      menagePauvre:
        "Les ménages en situation de précarité disposent de moins de ressources économiques pour accéder aux soins ou pour entreprendre des travaux d’amélioration du confort thermique de leur logement.",
      proxiVert:
        "La proximité à un espace vert ouvert au public offre une échappatoire à un logement surchauffé en période de canicule.",
      vegetHaute:
        "La présence de végétation haute dans l’environnement immédiat de son habitat (rue, cours d’immeuble, etc.) offre une échappatoire à un logement surchauffé en période de canicule.",
      offreMed: "L’accessibilité à un médecin généraliste traduit l’accès aux soins la journée.",
      densEmploi:
        "La densité d’emplois reflète la présence humaine en journée sur les lieux de travail.",
      densHab: "La densité d'habitants reflète la présence humaine sur les lieux d'habitation.",
      densLog:
        "La densité d’occupation reflète le risque de suroccupation et donc d’inconfort thermique des logements.",
      popSensible:
        "Les enfants de moins de 5 ans et les personnes de plus de 65 ans sont plus sensibles.",
      partMenage1ind:
        "La part de ménages individuels reflète l'isolement potentiel des personnes vivant seules.",
      incofortHabitat:
        "La présence de logements à faible performance énergétique reflète l’inconfort thermique des logements.",
      qualiteAir:
        "Un pic de pollution à l’ozone est cofacteur de surmortalité en période de canicule."
    }

    return descriptions[factorId] || "Description non disponible."
  }

  return {
    factorsWithScores,
    getScoreColor,
    getScoreLabel,
    colorLegend,
    getFactorDescription
  }
}
