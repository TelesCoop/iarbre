import { computed, type Ref } from "vue"
import type { VulnerabilityFactor, VulnerabilityData, ColorLegendItem } from "@/types/vulnerability"

export const useVulnerability = (data: Ref<VulnerabilityData>) => {
  const factorsWithScores = computed((): VulnerabilityFactor[] => {
    // Vérification simple des données
    if (!data?.value?.details) {
      console.warn("Données de vulnérabilité manquantes")
      return []
    }

    const details = data.value.details

    return [
      {
        id: "surfaceBaties",
        label: "Nombre de surfaces bâties",
        dayScore: details.ExpoJourNoteDensBatiVol ?? null,
        nightScore: details.ExpoNuitNoteDensBatiVol ?? null
      },
      {
        id: "ventilation",
        label: "Ventilation de l'îlot",
        dayScore: null,
        nightScore: null
      },
      {
        id: "natureSol",
        label: "Nature du sol et écoulement de l'air",
        dayScore: null,
        nightScore: null
      },
      {
        id: "obstacleCiel",
        label: "Obstacle à la vue du ciel",
        dayScore: details.ExpoJourNoteSkyViewFactor ?? null,
        nightScore: details.ExpoNuitNoteSkyViewFactor ?? null
      },
      {
        id: "impermeabilisation",
        label: "Imperméabilisation des sols",
        dayScore: details.ExpoJourNotePermeabilite ?? null,
        nightScore: details.ExpoNuitNotePermeabilite ?? null
      },
      {
        id: "vegetationHaute",
        label: "Ombrage lié aux arbres",
        dayScore: details.ExpoJourNoteVegetationHaute ?? null,
        nightScore: null
      },
      {
        id: "presenceVegetation",
        label: "Présence/absence de végétation",
        dayScore: details.ExpoJourNoteVegetation ?? null,
        nightScore: details.ExpoNuitNoteVegetation ?? null
      },
      {
        id: "presenceEau",
        label: "Présence/absence d'eau",
        dayScore: details.ExpoJourNoteEau ?? null,
        nightScore: details.ExpoNuitNoteEau ?? null
      },
      {
        id: "proximiteForet",
        label: "Proximité de l'îlot à un bois une forêt",
        dayScore: details.ExpoJourNoteProxiForet ?? null,
        nightScore: details.ExpoNuitNoteProxiForet ?? null
      },
      {
        id: "proximiteEau",
        label: "Proximité de l'îlot à un cours d'eau ou un plan d'eau",
        dayScore: details.ExpoJourNoteProxiEau ?? null,
        nightScore: details.ExpoNuitNoteProxiEau ?? null
      },
      {
        id: "effusiviteThermique",
        label: "Effusivité thermique",
        dayScore: details.ExpoJourNoteEffusiviteThermique ?? null,
        nightScore: null
      },
      {
        id: "reflechissement",
        label: "Réfléchissement de la lumière",
        dayScore: details.ExpoJourNoteAlbedo ?? null,
        nightScore: null
      },
      {
        id: "accesUrgence",
        label: "Accès aux urgences",
        dayScore: details.CapafJourNoteAccesurgences ?? null,
        nightScore: details.CapafNuitNoteAccesurgences ?? null
      },
      {
        id: "menagePauvre",
        label: "Part de ménages défavorisé",
        dayScore: details.CapafJourNoteMenpauv ?? null,
        nightScore: details.CapafNuitNoteMenpauv ?? null
      },
      {
        id: "proxiVert",
        label: "Proximité espace vert",
        dayScore: details.CapafJourNoteProxiespacevert ?? null,
        nightScore: details.CapafNuitNoteProxiespacevert ?? null
      },
      {
        id: "vegetHaute",
        label: "Végatation haute",
        dayScore: details.CapafJourNoteVegetationHaute ?? null,
        nightScore: details.CapafNuitNoteProxiespacevert ?? null
      },
      {
        id: "offreMed",
        label: "Accès médecin généraliste",
        dayScore: details.CapafJourNoteOffremed ?? null,
        nightScore: null
      }
    ]
  })

  const getScoreColor = (score: number, factorId: string): string => {
    switch (factorId) {
      case "surfaceBaties":
        if (score === 4) return "bg-red-500"
        if (score === 2) return "bg-orange-500"
        if (score === 0) return "bg-green-500"
        break

      case "obstacleCiel":
        if (score === 4 || score === 2) return "bg-red-500"
        if (score === 1) return "bg-orange-500"
        if (score === 0) return "bg-green-500"
        if (score === -2) return "bg-blue-400"
        break

      case "ruesEtroites":
        if (score >= 2) return "bg-red-500"
        if (score === 2) return "bg-orange-500"
        if (score === 0) return "bg-blue-400"
        if (score === -2) return "bg-blue-400"
        break

      case "vegetationHaute":
        if (score === -1) return "bg-blue-400"
        if (score === -2) return "bg-blue-700"
        break

      case "presenceVegetation":
        if (score === 1) return "bg-yellow-500"
        if (score === 0) return "bg-green-500"
        if (score === -1) return "bg-blue-400"
        if (score === -2) return "bg-blue-700"
        break

      case "presenceEau":
        if (score === 1) return "bg-yellow-500"
        if (score === 0) return "bg-green-500"
        if (score === -1) return "bg-blue-400"
        if (score === -2) return "bg-blue-700"
        break

      case "impermeabilisation":
        if (score === 3) return "bg-red-500"
        if (score === 2) return "bg-orange-500"
        if (score === -1) return "bg-blue-400"
        break

      case "effusiviteThermique":
        if (score === 4) return "bg-red-500"
        if (score === 2) return "bg-orange-500"
        if (score === 0) return "bg-green-500"
        break

      case "reflechissement":
        if (score === 2) return "bg-orange-500"
        if (score === 1) return "bg-yellow-500"
        if (score === -2) return "bg-blue-400"
        break

      case "proximiteForet":
        if (score === -1) return "bg-blue-400"
        if (score === 0) return "bg-gray-400"
        break

      case "proximiteEau":
        if (score === -1) return "bg-blue-400"
        if (score === 0) return "bg-gray-400"
        break

      case "accesUrgence":
        if (score === 0) return "bg-green-500"
        if (score == 1) return "bg-yellow-500"
        if (score == 2) return "bg-orange-500"
        break

      case "menagePauvre":
        if (score == 0) return "bg-green-500"
        if (score == 3) return "bg-orange-500"
        if (score == 6) return "bg-red-500"
        break

      case "proxiVert":
        if (score === 0) return "bg-green-500"
        if (score == 1) return "bg-yellow-500"
        if (score == 2) return "bg-orange-500"
        break

      case "vegetHaute":
        if (score === 0) return "bg-green-500"
        if (score == 1) return "bg-yellow-500"
        if (score == 2) return "bg-orange-500"
        break

      case "offreMed":
        if (score === 0) return "bg-green-500"
        if (score == 2) return "bg-orange-500"
        break
    }
    return "bg-gray-400"
  }

  const getScoreLabel = (score: number, factorId: string): string => {
    const color = getScoreColor(score, factorId)

    if (color.includes("red")) return "Fort"
    if (color.includes("orange")) return "Moyen"
    if (color.includes("yellow")) return "Faible"
    if (color.includes("green")) return "Pas d'impact"
    if (color.includes("blue-400")) return "Effet de fraîcheur"
    if (color.includes("blue-700")) return "Effet de fraîcheur élevé"
    return "Effet inconnu"
  }

  const colorLegend: ColorLegendItem[] = [
    { color: "bg-red-500", label: "Fort" },
    { color: "bg-orange-500", label: "Moyen" },
    { color: "bg-yellow-500", label: "Faible" },
    { color: "bg-green-500", label: "Neutre" },
    { color: "bg-blue-400", label: "Effet de fraîcheur" },
    { color: "bg-blue-700", label: "Effet de fraîcheur élevé" },
    { color: "bg-gray-400", label: "Aucun effet" }
  ]

  const getFactorDescription = (factorId: string): string => {
    const descriptions: Record<string, string> = {
      surfaceBaties:
        "La densité des surfaces bâties influence directement l'absorption et la rétention de chaleur dans l'environnement urbain.",
      ventilation:
        "La circulation de l'air permet d'évacuer la chaleur accumulée et de rafraîchir l'environnement urbain.",
      natureSol:
        "La nature du sol et sa capacité d'écoulement influencent l'accumulation d'humidité et la régulation thermique.",
      obstacleCiel:
        "Les obstacles réduisent la vue du ciel et limitent le refroidissement radiatif nocturne.",
      ruesEtroites:
        "Le rapport hauteur/largeur des rues influence la ventilation et l'ombrage urbain.",
      impermeabilisation: "Les surfaces imperméables réduisent la potentielle évaporation.",
      vegetationHaute:
        "La végétation haute procure de l'ombrage et contribue au refroidissement par évapotranspiration.",
      presenceVegetation:
        "La végétation contribue au refroidissement par évapotranspiration et ombrage.",
      presenceEau: "Les surfaces en eau contribuent au refroidissement par évaporation.",
      reflechissement: "L'albédo des surfaces influence la réflexion de l'énergie solaire.",
      proximiteForet: "Un espace boisé a proximité contribue à rafraîchir les zones voisines.",
      proximiteEau: "Un cours ou plan d'eau a proximité contribue à rafraîchir les zones voisines.",
      effusiviteThermique:
        "L'effusivité thermique des matériaux influence leur capacité à absorber et restituer la chaleur.",
      accesUrgence:
        "La proximité à un service d'urgences hospitalières est construit à l'aide du temps de trajet moyen (ralentissements compris).",
      menagePauvre:
        "Les ménages dévaforisés ont un déficit d'accès aux soins et peuvent plus difficilement entreprendre des travaux (isolations, ventilation) du logement.",
      proxiVert:
        "La proximité d'un espace vert ouvert au public permet de s'échapper de son logement en surchauffe.",
      vegetHaute:
        "L'absence significative d'arbres prive la population d'un logement surchauffé d'une ressource de fraicheur.",
      offreMed: "Un généraliste à proximté permet l'accès facile aux soins la journée."
    }

    return descriptions[factorId] || "Description non disponible."
  }

  return {
    factorsWithScores,
    getScoreColor,
    getScoreLabel,
    colorLegend,
    getFactorDescription
  }
}
