import { computed } from "vue"
import type {
  VulnerabilityFactor,
  VulnerabilityDetails,
  ColorLegendItem
} from "@/types/vulnerability"

export const useVulnerability = (details: VulnerabilityDetails) => {
  // === DATA ===

  const factorsWithScores = computed((): VulnerabilityFactor[] => [
    {
      id: "surfaces_baties",
      label: "Nombre de surfaces bâties",
      dayScore: details.ExpoJourNoteDensBatiVol,
      nightScore: details.ExpoNuitNoteDensBatiVol
    },
    {
      id: "ventilation",
      label: "Ventilation de l'îlot",
      dayScore: null,
      nightScore: null
    },
    {
      id: "nature_sol",
      label: "Nature du sol et écoulement de l'air",
      dayScore: null,
      nightScore: null
    },
    {
      id: "obstacle_ciel",
      label: "Obstacle à la vue du ciel",
      dayScore: details.ExpoJourNoteSkyViewFactor,
      nightScore: details.ExpoNuitNoteSkyViewFactor
    },
    {
      id: "rues_etroites",
      label: "Rues étroites bordées d'immeubles hauts",
      dayScore: details.ExpoJourNoteCanyon,
      nightScore: details.ExpoNuitNoteCanyon
    },
    {
      id: "impermeabilisation",
      label: "Imperméabilisation des sols",
      dayScore: details.ExpoJourNotePermeabilite,
      nightScore: details.ExpoNuitNotePermeabilite
    },
    {
      id: "ombrage_arbres",
      label: "Ombrage lié aux arbres",
      dayScore: details.ExpoJourNoteVegetationHaute,
      nightScore: null
    },
    {
      id: "presence_vegetation",
      label: "Présence/absence de végétation",
      dayScore: details.ExpoJourNoteVegetation,
      nightScore: details.ExpoNuitNoteVegetation
    },
    {
      id: "presence_eau",
      label: "Présence/absence d'eau",
      dayScore: details.ExpoJourNoteEau,
      nightScore: details.ExpoNuitNoteEau
    },
    {
      id: "proximite_foret",
      label: "Proximité de l'îlot à un bois une forêt",
      dayScore: details.ExpoJourNoteProxiForet,
      nightScore: details.ExpoNuitNoteProxiForet
    },
    {
      id: "proximite_eau",
      label: "Proximité de l'îlot à un cours d'eau ou un plan d'eau",
      dayScore: details.ExpoJourNoteProxiEau,
      nightScore: details.ExpoNuitNoteProxiEau
    },
    {
      id: "effusivite_thermique",
      label: "Effusivité thermique",
      dayScore: details.ExpoJourNoteEffusiviteThermique,
      nightScore: null
    },
    {
      id: "reflechissement",
      label: "Réfléchissement de la lumière",
      dayScore: details.ExpoJourNoteAlbedo,
      nightScore: null
    },
    {
      id: "chaleur_activite",
      label: "Chaleur produite par l'activité humaine",
      dayScore: null,
      nightScore: null
    }
  ])

  // === SCORING ===
  const getScoreColor = (score: number, factorId: string): string => {
    switch (factorId) {
      case "surfaces_baties":
        if (score === 4) return "bg-red-500"
        if (score === 2) return "bg-orange-500"
        if (score === 0) return "bg-green-500"
        break

      case "obstacle_ciel":
        if (score === 4 || score === 2) return "bg-red-500"
        if (score === 1) return "bg-orange-500"
        if (score === 0) return "bg-green-500"
        if (score === -2) return "bg-blue-400"
        break

      case "rues_etroites":
        if (score >= 2) return "bg-red-500"
        if (score === 2) return "bg-orange-500"
        if (score === 0) return "bg-blue-400"
        if (score === -2) return "bg-blue-400"
        break

      case "ombrage_arbres":
        if (score === -1) return "bg-blue-400"
        if (score === -2) return "bg-blue-700"
        break

      case "presence_vegetation":
        if (score === 1) return "bg-yellow-500"
        if (score === 0) return "bg-green-500"
        if (score === -1) return "bg-blue-400"
        if (score === -2) return "bg-blue-700"
        break

      case "presence_eau":
        if (score === 1) return "bg-yellow-500"
        if (score === 0) return "bg-green-500"
        if (score === -1) return "bg-blue-400"
        if (score === -2) return "bg-blue-700"
        break

      case "impermeabilisation":
        if (score === 3) return "bg-red-500"
        if (score === 2) return "bg-orange-500"
        if (score === -1) return "bg-blue-400"
        break

      case "effusivite_thermique":
        if (score === 4) return "bg-red-500"
        if (score === 2) return "bg-orange-500"
        if (score === 0) return "bg-green-500"
        break

      case "reflechissement":
        if (score === 2) return "bg-orange-500"
        if (score === 1) return "bg-yellow-500"
        if (score === -2) return "bg-blue-400"
        break

      case "proximite_foret":
        if (score === -1) return "bg-blue-400"
        if (score === 0) return "bg-gray-400"
        break

      case "proximite_eau":
        if (score === -1) return "bg-blue-400"
        if (score === 0) return "bg-gray-400"
        break
    }

    return "bg-gray-400"
  }

  const getScoreLabel = (score: number, factorId: string): string => {
    const color = getScoreColor(score, factorId)

    if (color.includes("red")) return "Fort"
    if (color.includes("orange")) return "Moyen"
    if (color.includes("yellow")) return "Faible"
    if (color.includes("green")) return "Neutre"
    if (color.includes("blue-400")) return "Effet de fraîcheur"
    if (color.includes("blue-700")) return "Effet de fraîcheur élevé"
    return "Aucun effet"
  }

  const colorLegend: ColorLegendItem[] = [
    { color: "bg-red-500", label: "Fort" },
    { color: "bg-orange-500", label: "Moyen" },
    { color: "bg-yellow-500", label: "Faible" },
    { color: "bg-green-500", label: "Neutre" },
    { color: "bg-blue-400", label: "Effet de fraîcheur" },
    { color: "bg-blue-700", label: "Effet de fraîcheur élevé" },
    { color: "bg-gray-400", label: "Aucun effet" }
  ]

  // === DESCRIPTIONS ===
  const getFactorDescription = (factorId: string): string => {
    const descriptions: Record<string, string> = {
      surfaces_baties:
        "La densité des surfaces bâties influence directement l'absorption et la rétention de chaleur dans l'environnement urbain.",
      ventilation:
        "La circulation de l'air permet d'évacuer la chaleur accumulée et de rafraîchir l'environnement urbain.",
      nature_sol:
        "La nature du sol et sa capacité d'écoulement influencent l'accumulation d'humidité et la régulation thermique.",
      obstacle_ciel:
        "Les obstacles réduisent la vue du ciel et limitent le refroidissement radiatif nocturne.",
      rues_etroites:
        "Le rapport hauteur/largeur des rues influence la ventilation et l'ombrage urbain.",
      impermeabilisation:
        "Les surfaces imperméables empêchent l'évapotranspiration et augmentent le ruissellement.",
      ombrage_arbres:
        "La végétation haute procure de l'ombrage et contribue au refroidissement par évapotranspiration.",
      presence_vegetation:
        "La végétation contribue au refroidissement par évapotranspiration et ombrage.",
      presence_eau: "Les surfaces en eau contribuent au refroidissement par évaporation.",
      reflechissement: "L'albédo des surfaces influence la réflexion de l'énergie solaire.",
      proximite_foret:
        "La proximité d'espaces boisés apporte des bénéfices de refroidissement par advection.",
      proximite_eau:
        "La proximité de cours d'eau ou plans d'eau contribue au refroidissement local.",
      effusivite_thermique:
        "L'effusivité thermique des matériaux influence leur capacité à absorber et restituer la chaleur.",
      chaleur_activite:
        "Les activités humaines génèrent de la chaleur anthropique qui s'ajoute à l'îlot de chaleur."
    }

    return descriptions[factorId] || "Description non disponible."
  }

  return {
    factorsWithScores,
    getScoreColor,
    getScoreLabel,
    colorLegend,
    getFactorDescription
  }
}
