/// <reference types="cypress" />
import VulnerabilityContextDataScoreBadge from "@/components/contextData/vulnerability/VulnerabilityContextDataScoreBadge.vue"
import { createPinia, setActivePinia } from "pinia"
import { VulnerabilityCategory } from "@/utils/enum"
import { VulnerabilityMode } from "@/utils/vulnerability"

describe("VulnerabilityContextDataScoreBadge.vue", () => {
  beforeEach(() => {
    const pinia = createPinia()
    setActivePinia(pinia)
  })

  it("renders scores for both day and night modes", () => {
    const pinia = createPinia()
    const getCategoryScore = (category: VulnerabilityCategory, mode: VulnerabilityMode) => {
      return mode === VulnerabilityMode.DAY ? 2 : 1
    }

    cy.mount(VulnerabilityContextDataScoreBadge, {
      props: {
        category: VulnerabilityCategory.EXPOSITION,
        getCategoryScore
      },
      global: {
        plugins: [pinia]
      }
    })

    cy.get('[data-cy="score-tag"]').should("have.length", 2)
  })

  it("displays N/A when score is null", () => {
    const pinia = createPinia()
    const getCategoryScore = () => null

    cy.mount(VulnerabilityContextDataScoreBadge, {
      props: {
        category: VulnerabilityCategory.EXPOSITION,
        getCategoryScore
      },
      global: {
        plugins: [pinia]
      }
    })

    cy.get(".bg-gray-200").should("have.length", 2)
    cy.contains("N/A").should("exist")
  })

  it("handles mixed null and numeric scores", () => {
    const pinia = createPinia()
    const getCategoryScore = (category: VulnerabilityCategory, mode: VulnerabilityMode) => {
      return mode === VulnerabilityMode.DAY ? 2 : null
    }

    cy.mount(VulnerabilityContextDataScoreBadge, {
      props: {
        category: VulnerabilityCategory.SENSIBILITY,
        getCategoryScore
      },
      global: {
        plugins: [pinia]
      }
    })

    cy.get('[data-cy="score-tag"]').should("have.length", 1)
    cy.get(".bg-gray-200").should("have.length", 1)
    cy.contains("N/A").should("exist")
  })

  it("renders with different category types", () => {
    const getCategoryScore = () => 3

    const categories = [
      VulnerabilityCategory.EXPOSITION,
      VulnerabilityCategory.SENSIBILITY,
      VulnerabilityCategory.CAPACITY_TO_FACE
    ]

    categories.forEach((category) => {
      const pinia = createPinia()

      cy.mount(VulnerabilityContextDataScoreBadge, {
        props: {
          category,
          getCategoryScore
        },
        global: {
          plugins: [pinia]
        }
      })

      cy.get('[data-cy="score-tag"]').should("have.length", 2)
    })
  })

  it("applies correct background color based on score", () => {
    const pinia = createPinia()
    const getCategoryScore = (category: VulnerabilityCategory, mode: VulnerabilityMode) => {
      return mode === VulnerabilityMode.DAY ? 3 : 1
    }

    cy.mount(VulnerabilityContextDataScoreBadge, {
      props: {
        category: VulnerabilityCategory.EXPOSITION,
        getCategoryScore
      },
      global: {
        plugins: [pinia]
      }
    })

    cy.get('[data-cy="score-tag"]').should("exist")
  })

  it("handles zero score", () => {
    const pinia = createPinia()
    const getCategoryScore = () => 0

    cy.mount(VulnerabilityContextDataScoreBadge, {
      props: {
        category: VulnerabilityCategory.EXPOSITION,
        getCategoryScore
      },
      global: {
        plugins: [pinia]
      }
    })

    cy.get('[data-cy="score-tag"]').should("have.length", 2)
  })
})
