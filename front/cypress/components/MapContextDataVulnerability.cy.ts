/// <reference types="cypress" />
import { createPinia } from "pinia"
import { mount } from "cypress/vue"
import MapContextDataVulnerability from "@/components/contextData/MapContextDataVulnerability.vue"
import { DataType, GeoLevel } from "@/utils/enum"
import type { VulnerabilityData } from "@/types/vulnerability"

const verifyFactorsVisibility = () => {
  cy.get('[data-cy^="vulnerability-factor-"]').should("have.length.at.least", 1)
}

const verifyScores = () => {
  cy.get('[data-cy^="day-score-"]').should("have.length.at.least", 1)
  cy.get('[data-cy^="night-score-"]').should("have.length.at.least", 1)
}

describe("MapContextDataVulnerability", () => {
  const mockVulnerabilityData: VulnerabilityData = {
    capafIndexDay: 1,
    capafIndexNight: 2,
    expoIndexDay: 3,
    expoIndexNight: 2,
    sensibiltyIndexDay: 1,
    sensibiltyIndexNight: 2,
    vulnerabilityIndexDay: 3,
    vulnerabilityIndexNight: 1,
    datatype: DataType.VULNERABILITY,
    geolevel: GeoLevel.LCZ,
    id: 123,
    geometry: "POLYGON((0 0, 1 0, 1 1, 0 1, 0 0))",
    mapGeometry: "POLYGON((0 0, 1 0, 1 1, 0 1, 0 0))",
    details: {
      CapafJourNoteAccesurgences: 5,
      CapafJourNoteMenpauv: 6,
      CapafJourNoteOffremed: 7,
      CapafJourNoteProxiespacevert: 8,
      CapafJourNoteVegetationHaute: 9,
      CapafNuitNoteAccesurgences: 4,
      CapafNuitNoteMenpauv: 5,
      CapafNuitNoteProxiespacevert: 6,
      CapafNuitNoteVegetationHaute: 7,
      ExpoJourNoteAlbedo: 2,
      ExpoJourNoteCanyon: 4,
      ExpoJourNoteDensBatiVol: 4,
      ExpoJourNoteEau: -1,
      ExpoJourNoteEffusiviteThermique: 4,
      ExpoJourNotePermeabilite: 3,
      ExpoJourNoteProxiEau: -1,
      ExpoJourNoteProxiForet: -1,
      ExpoJourNoteSkyViewFactor: 2,
      ExpoJourNoteVegetation: -1,
      ExpoJourNoteVegetationHaute: -2,
      ExpoNuitNoteCanyon: 2,
      ExpoNuitNoteDensBatiVol: 2,
      ExpoNuitNoteEau: -2,
      ExpoNuitNotePermeabilite: 2,
      ExpoNuitNoteProxiEau: -1,
      ExpoNuitNoteProxiForet: 0,
      ExpoNuitNoteSkyViewFactor: 1,
      ExpoNuitNoteVegetation: 0,
      LCZLibellé: "Compact mid-rise",
      LCZ_PRIMARY: 2,
      SensiJourNoteDensiteEmploi: 5,
      SensiJourNoteDensitéHab: 6,
      SensiJourNoteDensitéOccupationLogement: 7,
      SensiJourNoteIncofortHabitat: 8,
      SensiJourNotePartMenage1ind: 9,
      SensiJourNotePopulationSensible_âge: 1,
      SensiJourNoteQualitéAir: 2,
      SensiNuitNoteDensitéHab: 3,
      SensiNuitNoteDensitéOccupationLogement: 4,
      SensiNuitNoteIncofortHabitat: 5,
      SensiNuitNotePartMenage1ind: 6,
      SensiNuitNotePopulationSensible_âge: 7,
      SensiNuitNoteQualitéAir: 8,
      Surface_RSUDetails: 1000,
      codeinsee: "69001"
    }
  }

  const mockEmptyVulnerabilityData: VulnerabilityData = {
    ...mockVulnerabilityData,
    details: null
  }

  it("display vulnerability data correctly", () => {
    const pinia = createPinia()

    mount(MapContextDataVulnerability, {
      global: {
        plugins: [pinia]
      },
      props: {
        data: mockVulnerabilityData
      }
    })
    cy.get('[data-cy="vulnerability-context-data-table"]').should("be.visible")
    cy.get('[data-cy="vulnerability-context-data-legend"]').should("be.visible")
  })

  it("display empty message when no data is available", () => {
    const pinia = createPinia()

    mount(MapContextDataVulnerability, {
      global: {
        plugins: [pinia]
      },
      props: {
        data: mockEmptyVulnerabilityData
      }
    })

    cy.get('[data-cy="empty-message"]').should("be.visible")
    cy.contains("Cliquez sur une zone").should("be.visible")
  })

  it("display vulnerability factors with correct scores", () => {
    const pinia = createPinia()

    mount(MapContextDataVulnerability, {
      global: {
        plugins: [pinia]
      },
      props: {
        data: mockVulnerabilityData
      }
    })
    cy.get('[data-cy="vulnerability-context-data-table"]').within(() => {
      verifyFactorsVisibility()
      verifyScores()
    })
  })

  it("display legend with color indicators", () => {
    const pinia = createPinia()

    mount(MapContextDataVulnerability, {
      global: {
        plugins: [pinia]
      },
      props: {
        data: mockVulnerabilityData
      }
    })

    cy.get('[data-cy="vulnerability-context-data-legend"]').should("be.visible")
    cy.get('[data-cy="vulnerability-context-data-legend"]').within(() => {
      cy.contains("Fort").should("be.visible")
      cy.contains("Moyen").should("be.visible")
      cy.contains("Faible").should("be.visible")
      cy.contains("Pas d'impact").should("be.visible")
      cy.contains("Effet de fraîcheur").should("be.visible")
      cy.contains("Non pris en compte").should("be.visible")
    })
  })
})
